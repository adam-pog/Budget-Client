{"ast":null,"code":"var _jsxFileName = \"/home/npzd/devspace/crate/crate-client/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from \"react-redux\";\nimport { ApolloProvider } from '@apollo/client/react';\nimport { ApolloClient, createHttpLink, InMemoryCache, from } from '@apollo/client';\nimport { onError } from \"@apollo/client/link/error\";\nimport { setContext } from '@apollo/client/link/context';\nimport { Fetch } from './FetchHelper.js';\nimport Cookies from 'js-cookie';\nimport { setAuthenticated } from './actions/index';\nimport store from \"./config/configureStore\"; // get temp session / csrf token from server\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nFetch('temporary_session', 'get');\nconst httpLink = createHttpLink({\n  uri: '/graphql'\n});\nconst csrfLink = setContext((_, {\n  headers\n}) => {\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: { ...headers,\n      'X-CSRF-Token': Cookies.get('CSRF-Token')\n    }\n  };\n});\nconst errorLink = onError(({\n  networkError\n}) => {\n  if (networkError && [401, 422].includes(networkError.statusCode)) {\n    store.dispatch(setAuthenticated({\n      authenticated: false,\n      name: ''\n    }));\n    Fetch('temporary_session', 'get');\n  }\n});\nconst client = new ApolloClient({\n  link: from([errorLink, csrfLink, httpLink]),\n  cache: new InMemoryCache()\n});\nReactDOM.render( /*#__PURE__*/_jsxDEV(Provider, {\n  store: store,\n  children: /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 45,\n  columnNumber: 3\n}, this), document.getElementById('root'));","map":{"version":3,"sources":["/home/npzd/devspace/crate/crate-client/src/index.js"],"names":["React","ReactDOM","App","Provider","ApolloProvider","ApolloClient","createHttpLink","InMemoryCache","from","onError","setContext","Fetch","Cookies","setAuthenticated","store","httpLink","uri","csrfLink","_","headers","get","errorLink","networkError","includes","statusCode","dispatch","authenticated","name","client","link","cache","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,cAAT,QAA+B,sBAA/B;AACA,SAASC,YAAT,EAAuBC,cAAvB,EAAuCC,aAAvC,EAAsDC,IAAtD,QAAkE,gBAAlE;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,gBAAT,QAAiC,iBAAjC;AACA,OAAOC,KAAP,MAAkB,yBAAlB,C,CAEA;;;AACAH,KAAK,CAAC,mBAAD,EAAsB,KAAtB,CAAL;AAEA,MAAMI,QAAQ,GAAGT,cAAc,CAAC;AAC9BU,EAAAA,GAAG,EAAE;AADyB,CAAD,CAA/B;AAIA,MAAMC,QAAQ,GAAGP,UAAU,CAAC,CAACQ,CAAD,EAAI;AAAEC,EAAAA;AAAF,CAAJ,KAAoB;AAC9C;AACA,SAAO;AACLA,IAAAA,OAAO,EAAE,EACP,GAAGA,OADI;AAEP,sBAAgBP,OAAO,CAACQ,GAAR,CAAY,YAAZ;AAFT;AADJ,GAAP;AAMD,CAR0B,CAA3B;AAUA,MAAMC,SAAS,GAAGZ,OAAO,CAAC,CAAC;AAAEa,EAAAA;AAAF,CAAD,KAAsB;AAC9C,MAAIA,YAAY,IAAI,CAAC,GAAD,EAAM,GAAN,EAAWC,QAAX,CAAoBD,YAAY,CAACE,UAAjC,CAApB,EAAkE;AAChEV,IAAAA,KAAK,CAACW,QAAN,CAAeZ,gBAAgB,CAAC;AAACa,MAAAA,aAAa,EAAE,KAAhB;AAAuBC,MAAAA,IAAI,EAAE;AAA7B,KAAD,CAA/B;AACAhB,IAAAA,KAAK,CAAC,mBAAD,EAAsB,KAAtB,CAAL;AACD;AACF,CALwB,CAAzB;AAOA,MAAMiB,MAAM,GAAG,IAAIvB,YAAJ,CAAiB;AAC9BwB,EAAAA,IAAI,EAAErB,IAAI,CAAC,CAACa,SAAD,EAAYJ,QAAZ,EAAsBF,QAAtB,CAAD,CADoB;AAE9Be,EAAAA,KAAK,EAAE,IAAIvB,aAAJ;AAFuB,CAAjB,CAAf;AAKAN,QAAQ,CAAC8B,MAAT,eACE,QAAC,QAAD;AAAU,EAAA,KAAK,EAAEjB,KAAjB;AAAA,yBACE,QAAC,cAAD;AAAgB,IAAA,MAAM,EAAEc,MAAxB;AAAA,2BACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF,EAMEI,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CANF","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from \"react-redux\";\nimport { ApolloProvider } from '@apollo/client/react';\nimport { ApolloClient, createHttpLink, InMemoryCache, from } from '@apollo/client';\nimport { onError } from \"@apollo/client/link/error\";\nimport { setContext } from '@apollo/client/link/context';\nimport { Fetch } from './FetchHelper.js'\nimport Cookies from 'js-cookie';\nimport { setAuthenticated } from './actions/index';\nimport store from \"./config/configureStore\";\n\n// get temp session / csrf token from server\nFetch('temporary_session', 'get')\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst csrfLink = setContext((_, { headers }) => {\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      'X-CSRF-Token': Cookies.get('CSRF-Token')\n    }\n  }\n});\n\nconst errorLink = onError(({ networkError }) => {\n  if (networkError && [401, 422].includes(networkError.statusCode)) {\n    store.dispatch(setAuthenticated({authenticated: false, name: ''}));\n    Fetch('temporary_session', 'get')\n  }\n});\n\nconst client = new ApolloClient({\n  link: from([errorLink, csrfLink, httpLink]),\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </Provider>,\n  document.getElementById('root')\n);\n"]},"metadata":{},"sourceType":"module"}